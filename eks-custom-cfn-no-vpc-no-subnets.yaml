AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create a EKS Cluster with a private endpoint using custom resource.

Parameters:
  SubnetCIDR1:
    Description: Subnet CIDR range
    Type: String
  SubnetCIDR2:
    Description: Subnet CIDR range
    Type: String
  ApiServerLogging:
    Description: Enable API Server Logging
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  AuditLogging:
    Description: Enable Audit Logging
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  AuthenticatorLogging:
    Description: Enable Authenticator Logging
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  ControllerLogging:
    Description: Enable Controller Logging
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  SchedulerLogging:
    Description: Enable Scheduler Logging
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EKSExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
                - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: "EKSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeSubnets"
                  - "eks:CreateCluster"
                  - "eks:DeleteCluster"
                  - "iam:GetRole"
                  - "iam:PassRole"
                  - "kms:CreateGrant"
                  - "kms:DescribeKey"
                  - "iam:CreateServiceLinkedRole"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DetachNetworkInterface"
                  - "ec2:ModifyNetworkInterfaceAttribute"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeVpcs"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "iam:ListAttachedRolePolicies"
                  - "ec2:CreateSecurityGroup"
                Resource: "*"

  EKSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:'
                - Ref: AWS::Partition
                - ':iam::'
                - Ref: AWS::AccountId
                - ":root"
          Action: kms:*
          Resource: "*"

  EKSPrivateClusterCustom:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt PrivateEncryptedEKSCluster.Arn
      EKSClusterRole: !GetAtt EKSClusterRole.Arn
      EKSClusterName: !Ref PrivateEncryptedEKSCluster
      EKSSubnetCIDR1: !Ref SubnetCIDR1
      EKSSubnetCIDR2: !Ref SubnetCIDR2
      EKSEncryptionkey: !GetAtt EKSKmsKey.Arn
      EKSApiServerLogging: !Ref ApiServerLogging
      EKSAuditLogging: !Ref AuditLogging
      EKSAuthenticatorLogging: !Ref AuthenticatorLogging
      EKSControllerLogging: !Ref ControllerLogging
      EKSSchedulerLogging: !Ref SchedulerLogging

  PrivateEncryptedEKSCluster:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Runtime: "python3.6"
      Timeout: 60
      Role: !GetAtt EKSExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              eks_client = boto3.client("eks")
              cluster_name = event["ResourceProperties"]["EKSClusterName"]
              cluster_role = event["ResourceProperties"]["EKSClusterRole"]
              subnet_1 = event["ResourceProperties"]["EKSSubnetCIDR1"]
              subnet_2 = event["ResourceProperties"]["EKSSubnetCIDR2"]
              kms_arn = event["ResourceProperties"]["EKSEncryptionkey"]
              api_log_value = (
                  "api" if event["ResourceProperties"]["EKSApiServerLogging"] == "Yes" else ""
              )
              audit_log_value = (
                  "audit" if event["ResourceProperties"]["EKSAuditLogging"] == "Yes" else ""
              )
              authenticator_log_value = (
                  "authenticator"
                  if event["ResourceProperties"]["EKSAuthenticatorLogging"] == "Yes"
                  else ""
              )
              controller_log_value = (
                  "controllerManager"
                  if event["ResourceProperties"]["EKSControllerLogging"] == "Yes"
                  else ""
              )
              scheduler_log_value = (
                  "scheduler"
                  if event["ResourceProperties"]["EKSSchedulerLogging"] == "Yes"
                  else ""
              )
              subnet_list = []
              subnet_list.extend((subnet_1, subnet_2))
              resourcesVpcConfig = {
                  "subnetIds": subnet_list,
                  "endpointPublicAccess": False,
                  "endpointPrivateAccess": True,
              }
              cluster_encryptionConfig = [
                  {"resources": ["secrets"], "provider": {"keyArn": kms_arn}}
              ]
              cluster_logging_types = []
              if api_log_value == "api":
                  cluster_logging_types.append(api_log_value)
              if audit_log_value == "audit":
                  cluster_logging_types.append(audit_log_value)
              if authenticator_log_value == "authenticator":
                  cluster_logging_types.append(authenticator_log_value)
              if controller_log_value == "controllerManager":
                  cluster_logging_types.append(controller_log_value)
              if scheduler_log_value == "scheduler":
                  cluster_logging_types.append(scheduler_log_value)
              cluster_logging = {
                  "clusterLogging": [
                      {"types": cluster_logging_types, "enabled": True},
                  ]
              }
              try:
                  request_type = event["RequestType"]
                  if request_type == "Delete":
                      eks_client.delete_cluster(name=cluster_name)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "")
                  else:
                      private_cluster = eks_client.create_cluster(
                          name=cluster_name,
                          roleArn=cluster_role,
                          resourcesVpcConfig=resourcesVpcConfig,
                          encryptionConfig=cluster_encryptionConfig,
                          logging=cluster_logging
                      )
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          {},
                          private_cluster["cluster"]["arn"],
                      )
              except botocore.exceptions.ClientError as ex:
                  print(ex)
                  responseData = {}
                  responseData["Error"] = ex.response["Error"]["Code"]
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "")
              except:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "")
